//---------------------------Envelopes--------------------------

/*
case ANY(Present)
{
	when "cat"
	{
		"\0\s[0]Fanger: "
	}
	when "dog"
	{
		"\1\s[10]Winnie: "
	}
	when "otter"
	{
		"\p[3]\s[200]Shelly: "
	}
	when "penguin"
	{
		"\p[4]\s[300]Paige: "
	}
}
*/


presentanimals
{
	if CatStatus == "out" && OtterStatus == "out" && DogStatus == "out" && PenguinStatus == "out"
	{
		"Fanger the Cat, Winnie the Dog, Shelly the Otter, and Paige the Penguin"
	}
	elseif CatStatus == "out" && DogStatus == "out" && OtterStatus == "out"
	{
		"Fanger the Cat, Winnie the Dog, and Shelly the Otter"
	}
	elseif CatStatus == "out" && DogStatus == "out" && PenguinStatus == "out"
	{
		"Fanger the Cat, Winnie the Dog, and Paige the Penguin"
	}
	elseif CatStatus == "out" && OtterStatus == "out" && PenguinStatus == "out"
	{
		"Fanger the Cat, Shelly the Otter, and Paige the Penguin"
	}
	elseif DogStatus == "out" && OtterStatus == "out" && PenguinStatus == "out"
	{
		"Winnie the Dog, Shelly the Otter, and Paige the Penguin"
	}
	elseif CatStatus == "out" && DogStatus == "out"
	{
		"Fanger the Cat and Winnie the Dog"
	}
	elseif CatStatus == "out" && OtterStatus == "out"
	{
		"Fanger the Cat and Shelly the Otter"
	}
	elseif CatStatus == "out" && PenguinStatus == "out"
	{
		"Fanger the Cat and Paige the Penguin"
	}
	elseif DogStatus == "out" && OtterStatus == "out"
	{
		"Winnie the Dog and Shelly the Otter"
	}
	elseif DogStatus == "out" && PenguinStatus == "out"
	{
		"Winnie the Dog and Paige the Penguin"
	}
	elseif OtterStatus == "out" && PenguinStatus == "out"
	{
		"Shelly the Otter and Paige the Penguin"
	}
	elseif CatStatus == "out"
	{
		"Fanger the Cat"
	}
	elseif DogStatus == "out"
	{
		"Winnie the Dog"
	}
	elseif OtterStatus == "out"
	{
		"Shelly the Otter"
	}
	elseif PenguinStatus == "out"
	{
		"Paige the Penguin"
	}
}

/*
animalcheck
{
	if CatStatus == "out" && OtterStatus == "out" && DogStatus == "out" && PenguinStatus == "out"
	{
		present = "cat,dog,otter,penguin"
	}
	elseif CatStatus == "out" && DogStatus == "out" && OtterStatus == "out"
	{
		present = "cat,dog,otter"
	}
	elseif CatStatus == "out" && DogStatus == "out" && PenguinStatus == "out"
	{
		present = "cat,dog,penguin"
	}
	elseif CatStatus == "out" && OtterStatus == "out" && PenguinStatus == "out"
	{
		present = "cat,otter,penguin"
	}
	elseif DogStatus == "out" && OtterStatus == "out" && PenguinStatus == "out"
	{
		present = "dog,otter,penguin"
	}
	elseif CatStatus == "out" && DogStatus == "out"
	{
		present = "cat,dog"
	}
	elseif CatStatus == "out" && OtterStatus == "out"
	{
		present = "cat,otter"
	}
	elseif CatStatus == "out" && PenguinStatus == "out"
	{
		present = "cat,penguin"
	}
	elseif DogStatus == "out" && OtterStatus == "out"
	{
		present = "dog,otter"
	}
	elseif DogStatus == "out" && PenguinStatus == "out"
	{
		present = "dog,penguin"
	}
	elseif OtterStatus == "out" && PenguinStatus == "out"
	{
		present = "otter,penguin"
	}
	elseif CatStatus == "out"
	{
		present = "cat"
	}
	elseif DogStatus == "out"
	{
		present = "dog"
	}
	elseif OtterStatus == "out"
	{
		present = "otter"
	}
	elseif PenguinStatus == "out"
	{
		present = "penguin"
	}
}
*/

internalenvelope
{
	"Internal Envelope Dialogue 1 - %(exampleenvelope)"
	"%(username)'s computer"
	"Here is a blanklist object - %(blanklist)."
}


		//*********************Advanced User Info*******************************
	  //One particularly useful thing you can do is add value changes to an envelope, if your dialogue is in a place where it's not easy to add the change directly. For example...
	  
	  //FeelingsGoUp
	  //{
	  //Feelings += 1
	  //"Thank you, %(username), that was really nice of you.\e"
	  //}
	  
	  //So this would display the dialogue as well as change the value. Then you can call this in dialogue if you need to to change the value without having to do a bunch of fiddly business. You can change multiple values at once, and if you don't put dialogue in there, it will change the value invisibly.
	  
	  //Another use for these envelopes is to shortcut certain long lines of SakuraScript you don't want to have to keep typing.

	//Another way to use envelopes is to store multiple poses for SurfaceRestore in aitalk.dic. This can be an easy way to vary certain poses without having to manually put them in one at a time, and have some variety when your ghost goes back to its neutral pose in SurfaceRestore.
		
	  //***********************************************************************


usersfolder
{
	"%(username)'s Recycle Bin"
	"%(username)'s Document folder"
	"%(username)'s secret folder"
}


//I've called it a double envelope at times, but this is actually technically an array. Note that it has a word, a comma, then another word. This is essentially a list being stored in this envelope. You can call one of the values by using brackets around the number of the list entry. So, the first value (the Korean word) would be %(lessonkor[0]) since all arrays start at 0. The second value (the definition) would be %(lessonkor[1]). If you have a longer array, like "word,word,word,word,word", you can keep calling values by changing the numbers, like %(lessonkor[5]) or %(lessonkor[10]). An example of pulling information from this array can be seen in aitalk.dic.

lessonkor
{
	"사과(sa-gua),apple"
	"노동(no-dong),labor"
	"손가락(son-ga-rak),finger"
	"마르크스(ma-r-k-s),Marx"
	"자본주의(ja-bon-ju-yi),capitalism"
}

//You can also format your envelopes like this as one line separated by semicolons.
blanklistparagraph
{
	"List paragraph 1"; "List paragraph 2"; "List paragraph 3"; "List paragraph 4"; "List paragraph 5";
}


 //**** Don't touch this ***************************************************************
 //This is code stuff and nothing for you to worry about, just save the .dic and move on! You're done!
 
 On_\person
{
 	person
}
